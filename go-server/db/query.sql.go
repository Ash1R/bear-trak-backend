// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createDiningUser = `-- name: CreateDiningUser :one
INSERT INTO dining_users (
  user_id, device_id
) VALUES (
  $1, $2
)
RETURNING id, device_id, user_id, created_at, last_session_at
`

type CreateDiningUserParams struct {
	UserID   string
	DeviceID string
}

func (q *Queries) CreateDiningUser(ctx context.Context, arg CreateDiningUserParams) (DiningUser, error) {
	row := q.db.QueryRow(ctx, createDiningUser, arg.UserID, arg.DeviceID)
	var i DiningUser
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.UserID,
		&i.CreatedAt,
		&i.LastSessionAt,
	)
	return i, err
}

const deleteDiningUser = `-- name: DeleteDiningUser :exec
DELETE FROM dining_users
WHERE user_id = $1
`

func (q *Queries) DeleteDiningUser(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteDiningUser, userID)
	return err
}

const getDiningUser = `-- name: GetDiningUser :one
SELECT id, device_id, user_id, created_at, last_session_at FROM dining_users
WHERE device_id = $1 LIMIT 1
`

func (q *Queries) GetDiningUser(ctx context.Context, deviceID string) (DiningUser, error) {
	row := q.db.QueryRow(ctx, getDiningUser, deviceID)
	var i DiningUser
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.UserID,
		&i.CreatedAt,
		&i.LastSessionAt,
	)
	return i, err
}

const getDiningUserAll = `-- name: GetDiningUserAll :many
SELECT id, device_id, user_id, created_at, last_session_at FROM dining_users
WHERE user_id = $1
`

func (q *Queries) GetDiningUserAll(ctx context.Context, userID string) ([]DiningUser, error) {
	rows, err := q.db.Query(ctx, getDiningUserAll, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DiningUser
	for rows.Next() {
		var i DiningUser
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.UserID,
			&i.CreatedAt,
			&i.LastSessionAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiningUserSession = `-- name: UpdateDiningUserSession :exec
UPDATE dining_users
  SET last_session_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateDiningUserSession(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateDiningUserSession, id)
	return err
}
