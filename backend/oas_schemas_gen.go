// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Eatery
type Eatery struct {
	ID             int                    `json:"id"`
	Name           string                 `json:"name"`
	NameShort      string                 `json:"nameShort"`
	Latitude       float64                `json:"latitude"`
	Longitude      float64                `json:"longitude"`
	Location       string                 `json:"location"`
	Hours          []Hours                `json:"hours"`
	Region         EateryRegion           `json:"region"`
	PayMethods     []EateryPayMethodsItem `json:"payMethods"`
	Categories     []EateryCategoriesItem `json:"categories"`
	NextWeekEvents EateryNextWeekEvents   `json:"nextWeekEvents"`
}

// GetID returns the value of ID.
func (s *Eatery) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Eatery) GetName() string {
	return s.Name
}

// GetNameShort returns the value of NameShort.
func (s *Eatery) GetNameShort() string {
	return s.NameShort
}

// GetLatitude returns the value of Latitude.
func (s *Eatery) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *Eatery) GetLongitude() float64 {
	return s.Longitude
}

// GetLocation returns the value of Location.
func (s *Eatery) GetLocation() string {
	return s.Location
}

// GetHours returns the value of Hours.
func (s *Eatery) GetHours() []Hours {
	return s.Hours
}

// GetRegion returns the value of Region.
func (s *Eatery) GetRegion() EateryRegion {
	return s.Region
}

// GetPayMethods returns the value of PayMethods.
func (s *Eatery) GetPayMethods() []EateryPayMethodsItem {
	return s.PayMethods
}

// GetCategories returns the value of Categories.
func (s *Eatery) GetCategories() []EateryCategoriesItem {
	return s.Categories
}

// GetNextWeekEvents returns the value of NextWeekEvents.
func (s *Eatery) GetNextWeekEvents() EateryNextWeekEvents {
	return s.NextWeekEvents
}

// SetID sets the value of ID.
func (s *Eatery) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Eatery) SetName(val string) {
	s.Name = val
}

// SetNameShort sets the value of NameShort.
func (s *Eatery) SetNameShort(val string) {
	s.NameShort = val
}

// SetLatitude sets the value of Latitude.
func (s *Eatery) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *Eatery) SetLongitude(val float64) {
	s.Longitude = val
}

// SetLocation sets the value of Location.
func (s *Eatery) SetLocation(val string) {
	s.Location = val
}

// SetHours sets the value of Hours.
func (s *Eatery) SetHours(val []Hours) {
	s.Hours = val
}

// SetRegion sets the value of Region.
func (s *Eatery) SetRegion(val EateryRegion) {
	s.Region = val
}

// SetPayMethods sets the value of PayMethods.
func (s *Eatery) SetPayMethods(val []EateryPayMethodsItem) {
	s.PayMethods = val
}

// SetCategories sets the value of Categories.
func (s *Eatery) SetCategories(val []EateryCategoriesItem) {
	s.Categories = val
}

// SetNextWeekEvents sets the value of NextWeekEvents.
func (s *Eatery) SetNextWeekEvents(val EateryNextWeekEvents) {
	s.NextWeekEvents = val
}

type EateryCategoriesItem string

const (
	EateryCategoriesItemConvenienceStore EateryCategoriesItem = "convenienceStore"
	EateryCategoriesItemCafe             EateryCategoriesItem = "cafe"
	EateryCategoriesItemDiningRoom       EateryCategoriesItem = "diningRoom"
	EateryCategoriesItemCoffeeShop       EateryCategoriesItem = "coffeeShop"
	EateryCategoriesItemCart             EateryCategoriesItem = "cart"
	EateryCategoriesItemFoodCourt        EateryCategoriesItem = "foodCourt"
)

// AllValues returns all EateryCategoriesItem values.
func (EateryCategoriesItem) AllValues() []EateryCategoriesItem {
	return []EateryCategoriesItem{
		EateryCategoriesItemConvenienceStore,
		EateryCategoriesItemCafe,
		EateryCategoriesItemDiningRoom,
		EateryCategoriesItemCoffeeShop,
		EateryCategoriesItemCart,
		EateryCategoriesItemFoodCourt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EateryCategoriesItem) MarshalText() ([]byte, error) {
	switch s {
	case EateryCategoriesItemConvenienceStore:
		return []byte(s), nil
	case EateryCategoriesItemCafe:
		return []byte(s), nil
	case EateryCategoriesItemDiningRoom:
		return []byte(s), nil
	case EateryCategoriesItemCoffeeShop:
		return []byte(s), nil
	case EateryCategoriesItemCart:
		return []byte(s), nil
	case EateryCategoriesItemFoodCourt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EateryCategoriesItem) UnmarshalText(data []byte) error {
	switch EateryCategoriesItem(data) {
	case EateryCategoriesItemConvenienceStore:
		*s = EateryCategoriesItemConvenienceStore
		return nil
	case EateryCategoriesItemCafe:
		*s = EateryCategoriesItemCafe
		return nil
	case EateryCategoriesItemDiningRoom:
		*s = EateryCategoriesItemDiningRoom
		return nil
	case EateryCategoriesItemCoffeeShop:
		*s = EateryCategoriesItemCoffeeShop
		return nil
	case EateryCategoriesItemCart:
		*s = EateryCategoriesItemCart
		return nil
	case EateryCategoriesItemFoodCourt:
		*s = EateryCategoriesItemFoodCourt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EateryEvent
type EateryEvent struct {
	Start          time.Time            `json:"start"`
	End            time.Time            `json:"end"`
	MenuCategories []EateryMenuCategory `json:"menuCategories"`
}

// GetStart returns the value of Start.
func (s *EateryEvent) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *EateryEvent) GetEnd() time.Time {
	return s.End
}

// GetMenuCategories returns the value of MenuCategories.
func (s *EateryEvent) GetMenuCategories() []EateryMenuCategory {
	return s.MenuCategories
}

// SetStart sets the value of Start.
func (s *EateryEvent) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *EateryEvent) SetEnd(val time.Time) {
	s.End = val
}

// SetMenuCategories sets the value of MenuCategories.
func (s *EateryEvent) SetMenuCategories(val []EateryMenuCategory) {
	s.MenuCategories = val
}

// Ref: #/components/schemas/EateryMenuCategory
type EateryMenuCategory struct {
	Name    string                        `json:"name"`
	SortIdx int                           `json:"sortIdx"`
	Items   []EateryMenuCategoryItemsItem `json:"items"`
}

// GetName returns the value of Name.
func (s *EateryMenuCategory) GetName() string {
	return s.Name
}

// GetSortIdx returns the value of SortIdx.
func (s *EateryMenuCategory) GetSortIdx() int {
	return s.SortIdx
}

// GetItems returns the value of Items.
func (s *EateryMenuCategory) GetItems() []EateryMenuCategoryItemsItem {
	return s.Items
}

// SetName sets the value of Name.
func (s *EateryMenuCategory) SetName(val string) {
	s.Name = val
}

// SetSortIdx sets the value of SortIdx.
func (s *EateryMenuCategory) SetSortIdx(val int) {
	s.SortIdx = val
}

// SetItems sets the value of Items.
func (s *EateryMenuCategory) SetItems(val []EateryMenuCategoryItemsItem) {
	s.Items = val
}

type EateryMenuCategoryItemsItem struct {
	Name    string `json:"name"`
	Healthy bool   `json:"healthy"`
	SortIdx int    `json:"sortIdx"`
}

// GetName returns the value of Name.
func (s *EateryMenuCategoryItemsItem) GetName() string {
	return s.Name
}

// GetHealthy returns the value of Healthy.
func (s *EateryMenuCategoryItemsItem) GetHealthy() bool {
	return s.Healthy
}

// GetSortIdx returns the value of SortIdx.
func (s *EateryMenuCategoryItemsItem) GetSortIdx() int {
	return s.SortIdx
}

// SetName sets the value of Name.
func (s *EateryMenuCategoryItemsItem) SetName(val string) {
	s.Name = val
}

// SetHealthy sets the value of Healthy.
func (s *EateryMenuCategoryItemsItem) SetHealthy(val bool) {
	s.Healthy = val
}

// SetSortIdx sets the value of SortIdx.
func (s *EateryMenuCategoryItemsItem) SetSortIdx(val int) {
	s.SortIdx = val
}

type EateryNextWeekEvents struct {
	Monday    []EateryEvent `json:"monday"`
	Tuesday   []EateryEvent `json:"tuesday"`
	Wednesday []EateryEvent `json:"wednesday"`
	Thursday  []EateryEvent `json:"thursday"`
	Friday    []EateryEvent `json:"friday"`
	Saturday  []EateryEvent `json:"saturday"`
	Sunday    []EateryEvent `json:"sunday"`
}

// GetMonday returns the value of Monday.
func (s *EateryNextWeekEvents) GetMonday() []EateryEvent {
	return s.Monday
}

// GetTuesday returns the value of Tuesday.
func (s *EateryNextWeekEvents) GetTuesday() []EateryEvent {
	return s.Tuesday
}

// GetWednesday returns the value of Wednesday.
func (s *EateryNextWeekEvents) GetWednesday() []EateryEvent {
	return s.Wednesday
}

// GetThursday returns the value of Thursday.
func (s *EateryNextWeekEvents) GetThursday() []EateryEvent {
	return s.Thursday
}

// GetFriday returns the value of Friday.
func (s *EateryNextWeekEvents) GetFriday() []EateryEvent {
	return s.Friday
}

// GetSaturday returns the value of Saturday.
func (s *EateryNextWeekEvents) GetSaturday() []EateryEvent {
	return s.Saturday
}

// GetSunday returns the value of Sunday.
func (s *EateryNextWeekEvents) GetSunday() []EateryEvent {
	return s.Sunday
}

// SetMonday sets the value of Monday.
func (s *EateryNextWeekEvents) SetMonday(val []EateryEvent) {
	s.Monday = val
}

// SetTuesday sets the value of Tuesday.
func (s *EateryNextWeekEvents) SetTuesday(val []EateryEvent) {
	s.Tuesday = val
}

// SetWednesday sets the value of Wednesday.
func (s *EateryNextWeekEvents) SetWednesday(val []EateryEvent) {
	s.Wednesday = val
}

// SetThursday sets the value of Thursday.
func (s *EateryNextWeekEvents) SetThursday(val []EateryEvent) {
	s.Thursday = val
}

// SetFriday sets the value of Friday.
func (s *EateryNextWeekEvents) SetFriday(val []EateryEvent) {
	s.Friday = val
}

// SetSaturday sets the value of Saturday.
func (s *EateryNextWeekEvents) SetSaturday(val []EateryEvent) {
	s.Saturday = val
}

// SetSunday sets the value of Sunday.
func (s *EateryNextWeekEvents) SetSunday(val []EateryEvent) {
	s.Sunday = val
}

type EateryPayMethodsItem string

const (
	EateryPayMethodsItemSwipes        EateryPayMethodsItem = "swipes"
	EateryPayMethodsItemBigRedBucks   EateryPayMethodsItem = "bigRedBucks"
	EateryPayMethodsItemCash          EateryPayMethodsItem = "cash"
	EateryPayMethodsItemDigitalWallet EateryPayMethodsItem = "digitalWallet"
	EateryPayMethodsItemCreditCard    EateryPayMethodsItem = "creditCard"
	EateryPayMethodsItemCornellCard   EateryPayMethodsItem = "cornellCard"
)

// AllValues returns all EateryPayMethodsItem values.
func (EateryPayMethodsItem) AllValues() []EateryPayMethodsItem {
	return []EateryPayMethodsItem{
		EateryPayMethodsItemSwipes,
		EateryPayMethodsItemBigRedBucks,
		EateryPayMethodsItemCash,
		EateryPayMethodsItemDigitalWallet,
		EateryPayMethodsItemCreditCard,
		EateryPayMethodsItemCornellCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EateryPayMethodsItem) MarshalText() ([]byte, error) {
	switch s {
	case EateryPayMethodsItemSwipes:
		return []byte(s), nil
	case EateryPayMethodsItemBigRedBucks:
		return []byte(s), nil
	case EateryPayMethodsItemCash:
		return []byte(s), nil
	case EateryPayMethodsItemDigitalWallet:
		return []byte(s), nil
	case EateryPayMethodsItemCreditCard:
		return []byte(s), nil
	case EateryPayMethodsItemCornellCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EateryPayMethodsItem) UnmarshalText(data []byte) error {
	switch EateryPayMethodsItem(data) {
	case EateryPayMethodsItemSwipes:
		*s = EateryPayMethodsItemSwipes
		return nil
	case EateryPayMethodsItemBigRedBucks:
		*s = EateryPayMethodsItemBigRedBucks
		return nil
	case EateryPayMethodsItemCash:
		*s = EateryPayMethodsItemCash
		return nil
	case EateryPayMethodsItemDigitalWallet:
		*s = EateryPayMethodsItemDigitalWallet
		return nil
	case EateryPayMethodsItemCreditCard:
		*s = EateryPayMethodsItemCreditCard
		return nil
	case EateryPayMethodsItemCornellCard:
		*s = EateryPayMethodsItemCornellCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EateryRegion string

const (
	EateryRegionCentral EateryRegion = "central"
	EateryRegionWest    EateryRegion = "west"
	EateryRegionNorth   EateryRegion = "north"
	EateryRegionUnknown EateryRegion = "unknown"
)

// AllValues returns all EateryRegion values.
func (EateryRegion) AllValues() []EateryRegion {
	return []EateryRegion{
		EateryRegionCentral,
		EateryRegionWest,
		EateryRegionNorth,
		EateryRegionUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EateryRegion) MarshalText() ([]byte, error) {
	switch s {
	case EateryRegionCentral:
		return []byte(s), nil
	case EateryRegionWest:
		return []byte(s), nil
	case EateryRegionNorth:
		return []byte(s), nil
	case EateryRegionUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EateryRegion) UnmarshalText(data []byte) error {
	switch EateryRegion(data) {
	case EateryRegionCentral:
		*s = EateryRegionCentral
		return nil
	case EateryRegionWest:
		*s = EateryRegionWest
		return nil
	case EateryRegionNorth:
		*s = EateryRegionNorth
		return nil
	case EateryRegionUnknown:
		*s = EateryRegionUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Error
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Gym
type Gym struct {
	ID                  int                          `json:"id"`
	Name                string                       `json:"name"`
	ImageUrl            url.URL                      `json:"imageUrl"`
	Latitude            float64                      `json:"latitude"`
	Longitude           float64                      `json:"longitude"`
	Hours               []Hours                      `json:"hours"`
	Facilities          []GymFacilitiesItem          `json:"facilities"`
	EquipmentCategories []GymEquipmentCategoriesItem `json:"equipmentCategories"`
}

// GetID returns the value of ID.
func (s *Gym) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Gym) GetName() string {
	return s.Name
}

// GetImageUrl returns the value of ImageUrl.
func (s *Gym) GetImageUrl() url.URL {
	return s.ImageUrl
}

// GetLatitude returns the value of Latitude.
func (s *Gym) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *Gym) GetLongitude() float64 {
	return s.Longitude
}

// GetHours returns the value of Hours.
func (s *Gym) GetHours() []Hours {
	return s.Hours
}

// GetFacilities returns the value of Facilities.
func (s *Gym) GetFacilities() []GymFacilitiesItem {
	return s.Facilities
}

// GetEquipmentCategories returns the value of EquipmentCategories.
func (s *Gym) GetEquipmentCategories() []GymEquipmentCategoriesItem {
	return s.EquipmentCategories
}

// SetID sets the value of ID.
func (s *Gym) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Gym) SetName(val string) {
	s.Name = val
}

// SetImageUrl sets the value of ImageUrl.
func (s *Gym) SetImageUrl(val url.URL) {
	s.ImageUrl = val
}

// SetLatitude sets the value of Latitude.
func (s *Gym) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *Gym) SetLongitude(val float64) {
	s.Longitude = val
}

// SetHours sets the value of Hours.
func (s *Gym) SetHours(val []Hours) {
	s.Hours = val
}

// SetFacilities sets the value of Facilities.
func (s *Gym) SetFacilities(val []GymFacilitiesItem) {
	s.Facilities = val
}

// SetEquipmentCategories sets the value of EquipmentCategories.
func (s *Gym) SetEquipmentCategories(val []GymEquipmentCategoriesItem) {
	s.EquipmentCategories = val
}

type GymEquipmentCategoriesItem struct {
	CategoryType GymEquipmentCategoriesItemCategoryType `json:"categoryType"`
	Items        []string                               `json:"items"`
}

// GetCategoryType returns the value of CategoryType.
func (s *GymEquipmentCategoriesItem) GetCategoryType() GymEquipmentCategoriesItemCategoryType {
	return s.CategoryType
}

// GetItems returns the value of Items.
func (s *GymEquipmentCategoriesItem) GetItems() []string {
	return s.Items
}

// SetCategoryType sets the value of CategoryType.
func (s *GymEquipmentCategoriesItem) SetCategoryType(val GymEquipmentCategoriesItemCategoryType) {
	s.CategoryType = val
}

// SetItems sets the value of Items.
func (s *GymEquipmentCategoriesItem) SetItems(val []string) {
	s.Items = val
}

type GymEquipmentCategoriesItemCategoryType string

const (
	GymEquipmentCategoriesItemCategoryTypeTreadmills  GymEquipmentCategoriesItemCategoryType = "treadmills"
	GymEquipmentCategoriesItemCategoryTypeEllipticals GymEquipmentCategoriesItemCategoryType = "ellipticals"
	GymEquipmentCategoriesItemCategoryTypeRowing      GymEquipmentCategoriesItemCategoryType = "rowing"
	GymEquipmentCategoriesItemCategoryTypeBike        GymEquipmentCategoriesItemCategoryType = "bike"
	GymEquipmentCategoriesItemCategoryTypeLifting     GymEquipmentCategoriesItemCategoryType = "lifting"
	GymEquipmentCategoriesItemCategoryTypeMachines    GymEquipmentCategoriesItemCategoryType = "machines"
	GymEquipmentCategoriesItemCategoryTypeFreeWeights GymEquipmentCategoriesItemCategoryType = "freeWeights"
	GymEquipmentCategoriesItemCategoryTypeMisc        GymEquipmentCategoriesItemCategoryType = "misc"
)

// AllValues returns all GymEquipmentCategoriesItemCategoryType values.
func (GymEquipmentCategoriesItemCategoryType) AllValues() []GymEquipmentCategoriesItemCategoryType {
	return []GymEquipmentCategoriesItemCategoryType{
		GymEquipmentCategoriesItemCategoryTypeTreadmills,
		GymEquipmentCategoriesItemCategoryTypeEllipticals,
		GymEquipmentCategoriesItemCategoryTypeRowing,
		GymEquipmentCategoriesItemCategoryTypeBike,
		GymEquipmentCategoriesItemCategoryTypeLifting,
		GymEquipmentCategoriesItemCategoryTypeMachines,
		GymEquipmentCategoriesItemCategoryTypeFreeWeights,
		GymEquipmentCategoriesItemCategoryTypeMisc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GymEquipmentCategoriesItemCategoryType) MarshalText() ([]byte, error) {
	switch s {
	case GymEquipmentCategoriesItemCategoryTypeTreadmills:
		return []byte(s), nil
	case GymEquipmentCategoriesItemCategoryTypeEllipticals:
		return []byte(s), nil
	case GymEquipmentCategoriesItemCategoryTypeRowing:
		return []byte(s), nil
	case GymEquipmentCategoriesItemCategoryTypeBike:
		return []byte(s), nil
	case GymEquipmentCategoriesItemCategoryTypeLifting:
		return []byte(s), nil
	case GymEquipmentCategoriesItemCategoryTypeMachines:
		return []byte(s), nil
	case GymEquipmentCategoriesItemCategoryTypeFreeWeights:
		return []byte(s), nil
	case GymEquipmentCategoriesItemCategoryTypeMisc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GymEquipmentCategoriesItemCategoryType) UnmarshalText(data []byte) error {
	switch GymEquipmentCategoriesItemCategoryType(data) {
	case GymEquipmentCategoriesItemCategoryTypeTreadmills:
		*s = GymEquipmentCategoriesItemCategoryTypeTreadmills
		return nil
	case GymEquipmentCategoriesItemCategoryTypeEllipticals:
		*s = GymEquipmentCategoriesItemCategoryTypeEllipticals
		return nil
	case GymEquipmentCategoriesItemCategoryTypeRowing:
		*s = GymEquipmentCategoriesItemCategoryTypeRowing
		return nil
	case GymEquipmentCategoriesItemCategoryTypeBike:
		*s = GymEquipmentCategoriesItemCategoryTypeBike
		return nil
	case GymEquipmentCategoriesItemCategoryTypeLifting:
		*s = GymEquipmentCategoriesItemCategoryTypeLifting
		return nil
	case GymEquipmentCategoriesItemCategoryTypeMachines:
		*s = GymEquipmentCategoriesItemCategoryTypeMachines
		return nil
	case GymEquipmentCategoriesItemCategoryTypeFreeWeights:
		*s = GymEquipmentCategoriesItemCategoryTypeFreeWeights
		return nil
	case GymEquipmentCategoriesItemCategoryTypeMisc:
		*s = GymEquipmentCategoriesItemCategoryTypeMisc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GymFacilitiesItem struct {
	FacilityType GymFacilitiesItemFacilityType `json:"facilityType"`
	Name         string                        `json:"name"`
}

// GetFacilityType returns the value of FacilityType.
func (s *GymFacilitiesItem) GetFacilityType() GymFacilitiesItemFacilityType {
	return s.FacilityType
}

// GetName returns the value of Name.
func (s *GymFacilitiesItem) GetName() string {
	return s.Name
}

// SetFacilityType sets the value of FacilityType.
func (s *GymFacilitiesItem) SetFacilityType(val GymFacilitiesItemFacilityType) {
	s.FacilityType = val
}

// SetName sets the value of Name.
func (s *GymFacilitiesItem) SetName(val string) {
	s.Name = val
}

type GymFacilitiesItemFacilityType string

const (
	GymFacilitiesItemFacilityTypePool       GymFacilitiesItemFacilityType = "pool"
	GymFacilitiesItemFacilityTypeBasketball GymFacilitiesItemFacilityType = "basketball"
	GymFacilitiesItemFacilityTypeBowling    GymFacilitiesItemFacilityType = "bowling"
	GymFacilitiesItemFacilityTypeUnknown    GymFacilitiesItemFacilityType = "unknown"
)

// AllValues returns all GymFacilitiesItemFacilityType values.
func (GymFacilitiesItemFacilityType) AllValues() []GymFacilitiesItemFacilityType {
	return []GymFacilitiesItemFacilityType{
		GymFacilitiesItemFacilityTypePool,
		GymFacilitiesItemFacilityTypeBasketball,
		GymFacilitiesItemFacilityTypeBowling,
		GymFacilitiesItemFacilityTypeUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GymFacilitiesItemFacilityType) MarshalText() ([]byte, error) {
	switch s {
	case GymFacilitiesItemFacilityTypePool:
		return []byte(s), nil
	case GymFacilitiesItemFacilityTypeBasketball:
		return []byte(s), nil
	case GymFacilitiesItemFacilityTypeBowling:
		return []byte(s), nil
	case GymFacilitiesItemFacilityTypeUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GymFacilitiesItemFacilityType) UnmarshalText(data []byte) error {
	switch GymFacilitiesItemFacilityType(data) {
	case GymFacilitiesItemFacilityTypePool:
		*s = GymFacilitiesItemFacilityTypePool
		return nil
	case GymFacilitiesItemFacilityTypeBasketball:
		*s = GymFacilitiesItemFacilityTypeBasketball
		return nil
	case GymFacilitiesItemFacilityTypeBowling:
		*s = GymFacilitiesItemFacilityTypeBowling
		return nil
	case GymFacilitiesItemFacilityTypeUnknown:
		*s = GymFacilitiesItemFacilityTypeUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Hours
type Hours struct {
	Start time.Time `json:"start"`
	End   time.Time `json:"end"`
}

// GetStart returns the value of Start.
func (s *Hours) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *Hours) GetEnd() time.Time {
	return s.End
}

// SetStart sets the value of Start.
func (s *Hours) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *Hours) SetEnd(val time.Time) {
	s.End = val
}
